/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* cross browser reset*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

/*root element*/
/*this is the superhack for using REMs for everything... this keeps with whatever the user has set as their default browser size, but now we're
working in sets of 10px... so 1rem now = 10px.*/
html {
  font-size: 62.5%;
}

/* since css works via inheritance, setting the definitions for the font stuff will let it cascade down into all the child elements */
body {
  font-family: "Lucida Sans", "Lucida Sans Regular", "Lucida Grande",
    "Lucida Sans Unicode", Geneva, Verdana, sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem;
  box-sizing: border-box;
}

.header {
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgb(40, 180, 133, 0.8)
    ),
    url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  /*this "cuts" a piece of something off... to give the wedge look... points go clockwise from the top left
    clippy css clip path maker is a good tool for this... also notice the 75vh on the 3rd point, that keeps it responsive
    */
  /* clip-path: polygon(x y, x y, x y, x y); */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /*this is how the absoltue works on the logo-box, because it's using the parent element that is relative as a reference point for the top/bot/left/right params*/
  position: relative;
}

.logo-box {
  /*absolute positioning....so top/bot/left/right puts it exactly where we want it*/
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.logo {
  height: 3.5rem;
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  /*the button is an inline block element, so it gets treated like text, so to center it, we just put text-align:center on the parent element*/
  text-align: center;
}

.heading-primary {
  color: rgb(255, 255, 255);
  text-transform: uppercase;

  /*determines if the back part of an element is visibile when it's transforming... this helps ease animations*/
  backface-visibility: hidden;
  margin-bottom: 60px;
}

.heading-primary-main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;

  animation-name: moveInLeft;
  animation-duration: 1.5s;
  animation-timing-function: ease-in-out;
  /*
  animation-delay: 1s;
    animation-iteration-count: 3;
  */
}

.heading-primary-sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  animation: ease-in-out moveInRight 1.5s;
  /* animation-name: moveInRight;
  animation-duration: 1.5s;
  animation-timing-function: ease-in-out; */
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }
  65% {
    transform: translateX(2rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  65% {
    transform: translateX(-2rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(5rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

.btn:link,
.btn:visited {
  display: inline-block;
  text-transform: uppercase;
  text-decoration: none;
  border-radius: 10rem;
  transition: all 0.2s;
  position: relative;
  font-size: 1.6rem;
}

.btn:hover {
  transform: translateY(-0.3rem);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}

.btn:active {
  transform: translateY(-0.1rem);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}

.btn-white {
  background-color: white;
  color: #777;
  padding: 1.5rem 4rem;
}

.btn-white::after {
  background-color: white;
}

.btn::after {
  /*these params HAVE TO HAVE VALUES or else it wont' render...content and display*/
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

.btn-animated {
  animation: moveInBottom ease-in-out 0.75s;
  animation-fill-mode: backwards;
}
