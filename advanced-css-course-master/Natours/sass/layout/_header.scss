.header {
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgba($color-primary-light, 0.8),
      rgba($color-primary-dark, 0.8)
    ),
    url(../img/hero-small.jpg);
  background-size: cover;
  background-position: top;
  /*this "cuts" a piece of something off... to give the wedge look... points go clockwise from the top left
    clippy css clip path maker is a good tool for this... also notice the 75vh on the 3rd point, that keeps it responsive
    */
  /* clip-path: polygon(x y, x y, x y, x y); */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

  @media (min-resolution: 192dpi) and (min-width: 37.5),
    (-webkit-min-device-pixel-ratio: 2) and (min-width: 37.5),
    (min-width: 125em) {
    background-image: linear-gradient(
        to right bottom,
        rgba($color-primary-light, 0.8),
        rgba($color-primary-dark, 0.8)
      ),
      url(../img/hero.jpg);
  }

  @include respond(phone) {
    clip-path: polygon(0 0, 100% 0, 100% 90vh, 0 100%);
  }
  /*this is how the absolute works on the logo-box, because it's using the parent element that is relative as a reference point for the top/bot/left/right params*/
  position: relative;

  &__logo-box {
    /*absolute positioning....so top/bot/left/right puts it exactly where we want it*/
    position: absolute;
    top: 4rem;
    left: 4rem;
  }

  &__logo {
    height: 3.5rem;
  }

  &__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    /*the button is an inline block element, so it gets treated like text, so to center it, we just put text-align:center on the parent element*/
    text-align: center;
  }
}
